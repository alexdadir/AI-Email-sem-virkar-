{"ast":null,"code":"var _jsxFileName = \"/Users/alexdadi/Documents/email-platform/frontend/src/components/newMessage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NewMessage = ({\n  onClose\n}) => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [message, setMessage] = useState('');\n  const handleSearch = async () => {\n    // In a real app, this would search for users\n    // For now, we'll just simulate finding a user\n    if (searchTerm) {\n      setSelectedUser(searchTerm);\n    }\n  };\n  const handleSend = async () => {\n    if (selectedUser && message) {\n      // In a real app, this would send the message to the backend\n      console.log(`Sending message to ${selectedUser}: ${message}`);\n      onClose();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-message\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-message-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"New Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-message-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value),\n        placeholder: \"Search for a user\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), selectedUser && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"To: \", selectedUser]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          placeholder: \"Type your message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(NewMessage, \"16Ps8dUK5Zx43wvU/CoW6pW6fX0=\");\n_c = NewMessage;\nexport default NewMessage;\nvar _c;\n$RefreshReg$(_c, \"NewMessage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","NewMessage","onClose","_s","searchTerm","setSearchTerm","selectedUser","setSelectedUser","message","setMessage","handleSearch","handleSend","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/alexdadi/Documents/email-platform/frontend/src/components/newMessage.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\ninterface NewMessageProps {\n  onClose: () => void;\n}\n\nconst NewMessage: React.FC<NewMessageProps> = ({ onClose }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedUser, setSelectedUser] = useState<string | null>(null);\n  const [message, setMessage] = useState('');\n\n  const handleSearch = async () => {\n    // In a real app, this would search for users\n    // For now, we'll just simulate finding a user\n    if (searchTerm) {\n      setSelectedUser(searchTerm);\n    }\n  };\n\n  const handleSend = async () => {\n    if (selectedUser && message) {\n      // In a real app, this would send the message to the backend\n      console.log(`Sending message to ${selectedUser}: ${message}`);\n      onClose();\n    }\n  };\n\n  return (\n    <div className=\"new-message\">\n      <div className=\"new-message-header\">\n        <h3>New Message</h3>\n        <button onClick={onClose}>Close</button>\n      </div>\n      <div className=\"new-message-body\">\n        <input\n          type=\"text\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          placeholder=\"Search for a user\"\n        />\n        <button onClick={handleSearch}>Search</button>\n        {selectedUser && (\n          <>\n            <p>To: {selectedUser}</p>\n            <textarea\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              placeholder=\"Type your message\"\n            />\n            <button onClick={handleSend}>Send</button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default NewMessage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAOxC,MAAMC,UAAqC,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC7D,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EACrE,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMc,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B;IACA;IACA,IAAIN,UAAU,EAAE;MACdG,eAAe,CAACH,UAAU,CAAC;IAC7B;EACF,CAAC;EAED,MAAMO,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAIL,YAAY,IAAIE,OAAO,EAAE;MAC3B;MACAI,OAAO,CAACC,GAAG,CAAC,sBAAsBP,YAAY,KAAKE,OAAO,EAAE,CAAC;MAC7DN,OAAO,CAAC,CAAC;IACX;EACF,CAAC;EAED,oBACEJ,OAAA;IAAKgB,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC1BjB,OAAA;MAAKgB,SAAS,EAAC,oBAAoB;MAAAC,QAAA,gBACjCjB,OAAA;QAAAiB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpBrB,OAAA;QAAQsB,OAAO,EAAElB,OAAQ;QAAAa,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,eACNrB,OAAA;MAAKgB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BjB,OAAA;QACEuB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAElB,UAAW;QAClBmB,QAAQ,EAAGC,CAAC,IAAKnB,aAAa,CAACmB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC/CI,WAAW,EAAC;MAAmB;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,eACFrB,OAAA;QAAQsB,OAAO,EAAEV,YAAa;QAAAK,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAC7Cb,YAAY,iBACXR,OAAA,CAAAE,SAAA;QAAAe,QAAA,gBACEjB,OAAA;UAAAiB,QAAA,GAAG,MAAI,EAACT,YAAY;QAAA;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzBrB,OAAA;UACEwB,KAAK,EAAEd,OAAQ;UACfe,QAAQ,EAAGC,CAAC,IAAKf,UAAU,CAACe,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UAC5CI,WAAW,EAAC;QAAmB;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC,eACFrB,OAAA;UAAQsB,OAAO,EAAET,UAAW;UAAAI,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,eAC1C,CACH;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAChB,EAAA,CAjDIF,UAAqC;AAAA0B,EAAA,GAArC1B,UAAqC;AAmD3C,eAAeA,UAAU;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
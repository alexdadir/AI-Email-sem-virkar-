{"ast":null,"code":"var _jsxFileName = \"/Users/alexdadi/Documents/email-platform/frontend/src/components/EmailDetail.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmailDetail = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  // For now, we'll use a dummy email. In a real application, you'd fetch this from your API.\n  const email = {\n    id: id || '1',\n    from: 'john@example.com',\n    to: 'jane@example.com',\n    subject: 'Hello',\n    body: 'This is a test email.',\n    timestamp: new Date().toISOString()\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"email-detail\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"back-button\",\n      children: \"Back to Inbox\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: email.subject\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"From: \", email.from]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"To: \", email.to]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Sent: \", new Date(email.timestamp).toLocaleString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"email-body\",\n      children: email.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(EmailDetail, \"yQgCIz/jJfqV1l9s2yoba81MT5A=\", false, function () {\n  return [useParams];\n});\n_c = EmailDetail;\nexport default EmailDetail;\nvar _c;\n$RefreshReg$(_c, \"EmailDetail\");","map":{"version":3,"names":["React","useParams","Link","jsxDEV","_jsxDEV","EmailDetail","_s","id","email","from","to","subject","body","timestamp","Date","toISOString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleString","_c","$RefreshReg$"],"sources":["/Users/alexdadi/Documents/email-platform/frontend/src/components/EmailDetail.tsx"],"sourcesContent":["import React from 'react';\nimport { useParams, Link } from 'react-router-dom';\n\ninterface Email {\n  id: string;\n  from: string;\n  to: string;\n  subject: string;\n  body: string;\n  timestamp: string;\n}\n\nconst EmailDetail: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  // For now, we'll use a dummy email. In a real application, you'd fetch this from your API.\n  const email: Email = {\n    id: id || '1',\n    from: 'john@example.com',\n    to: 'jane@example.com',\n    subject: 'Hello',\n    body: 'This is a test email.',\n    timestamp: new Date().toISOString()\n  };\n\n  return (\n    <div className=\"email-detail\">\n      <Link to=\"/\" className=\"back-button\">Back to Inbox</Link>\n      <h2>{email.subject}</h2>\n      <p>From: {email.from}</p>\n      <p>To: {email.to}</p>\n      <p>Sent: {new Date(email.timestamp).toLocaleString()}</p>\n      <div className=\"email-body\">{email.body}</div>\n    </div>\n  );\n};\n\nexport default EmailDetail;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWnD,MAAMC,WAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM;IAAEC;EAAG,CAAC,GAAGN,SAAS,CAAiB,CAAC;EAC1C;EACA,MAAMO,KAAY,GAAG;IACnBD,EAAE,EAAEA,EAAE,IAAI,GAAG;IACbE,IAAI,EAAE,kBAAkB;IACxBC,EAAE,EAAE,kBAAkB;IACtBC,OAAO,EAAE,OAAO;IAChBC,IAAI,EAAE,uBAAuB;IAC7BC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;EAED,oBACEX,OAAA;IAAKY,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3Bb,OAAA,CAACF,IAAI;MAACQ,EAAE,EAAC,GAAG;MAACM,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACzDjB,OAAA;MAAAa,QAAA,EAAKT,KAAK,CAACG;IAAO;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACxBjB,OAAA;MAAAa,QAAA,GAAG,QAAM,EAACT,KAAK,CAACC,IAAI;IAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBjB,OAAA;MAAAa,QAAA,GAAG,MAAI,EAACT,KAAK,CAACE,EAAE;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBjB,OAAA;MAAAa,QAAA,GAAG,QAAM,EAAC,IAAIH,IAAI,CAACN,KAAK,CAACK,SAAS,CAAC,CAACS,cAAc,CAAC,CAAC;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzDjB,OAAA;MAAKY,SAAS,EAAC,YAAY;MAAAC,QAAA,EAAET,KAAK,CAACI;IAAI;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV,CAAC;AAACf,EAAA,CAtBID,WAAqB;EAAA,QACVJ,SAAS;AAAA;AAAAsB,EAAA,GADpBlB,WAAqB;AAwB3B,eAAeA,WAAW;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}